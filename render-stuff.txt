for each type of geometry in {solid, transparent, blend, ...}
for each shader, set shader
for each model
for each texture change, set object textures
for each object, set object uniforms ( various matrices, uniform parameters, ... )

## Fragment shader input

 * base_color (RGBA: alpha boolean for simplicity)
 * material_properties (RGB: roughness, metal, coating)
 * normals (RGB, x ,y, z)


## Final clamping routine, runs before converting to sRGB, but after any lighting

vec3 hcy_clamp(vec3 color)
	{
	float M=max( max(color.r,color.g), color.b );
	float m=min( min(color.r,color.g), color.b );
	vec3 weights=vec3(0.3333,0.3333,0.3334);

	float C=M-m;
	float huevals[3]=
		{
		 mod((color.g - color.b)/C,6)
		,(color.b - color.r)/C + 2
		,(color.r - color.g)/C + 4
		};
	float H=huevals[largest(color)];
	
	float Y=tanh(  dot(weights,color) );
	C=tanh( C );
	float X=C*(1.0 - abs(mod(H,2.0)-1.0));
	vec3 rgblut[7]=
		{
		 vec3(C,X,0)
		,vec3(X,C,0)
		,vec3(0,C,X)
		,vec3(0,X,C)
		,vec3(X,0,C)
		,vec3(C,0,X)
		,vec3(C,X,0)
		};
	float m_out=Y - dot(rgblut[int(H)],weights);
	return abs(m - M)<1e-5?vec3(Y,Y,Y):rgblut[int(H)] + vec3(m_out,m_out,m_out);
	}

## Convert to sRGB (we will activate sRGB framebuffer, thus not needed)

float sRGB(float x)
	{
	if (x <= 0.00031308)
		{return 12.92 * x;}
	else
		{return 1.055*pow(x,(1.0 / 2.4) ) - 0.055;}
	}

vec3 to_srgb(vec3 color)
	{return vec3(sRGB(color.r),sRGB(color.g),sRGB(color.b));}

## Simple Blinn-Phong lighting

Works great for non-metallic materials. But metallic materials will look better with proper ambient color. vec3(1,1,1) is the light color, and should be merged with light_intensity.

void main()
	{
	vec3 lf=light_position - fragment_pos;
	vec3 vf=camera_position - fragment_pos;

	float dl_2=dot(lf,lf);
	float dl=sqrt(dl_2);
	float n_proj_l=max(dot( fragment_normal,lf/dl ),0.0f);

	vec3 halfdir=normalize(vf + lf);
	float n_proj_halfdir=pow(max(dot(fragment_normal,halfdir),0),1.0f/roughness);
	float z_proj_n=0.5*( 1 + tanh(2*fragment_normal.z));

	vec3 diffuse=color_in*(n_proj_l/dl_2);
	vec3 glossy=mix(vec3(1.0f,1.0f,1.0f)*1.0/dl_2,color_in/dl_2,metal) * n_proj_halfdir;

	vec3 total=mix(mix(0.25f*diffuse,mix(diffuse,glossy,0.8f),coating), glossy ,metal) 
		+ 0.01*ambient*color_in*z_proj_n 
		+ mix(vec3(0.0f,0.0f,0.0f),0.001f*ambient*vec3(1.0f,1.0f,1.0f)*z_proj_n ,coating );

	color=to_srgb( hcy_clamp( 4.0f*light_intensity * total) );
	}